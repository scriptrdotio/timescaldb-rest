var http = require("http");
var log = require("log"); log.setLevel("info");

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 * @param {Object} credentials: object contains db url, username, password and authEnabled
 * @throw {Error}
 */
function Client(credentials) {
    if (!credentials || !credentials.url || !credentials.authEnabled) {
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Client: credentials.url, credentials.dbName and credentials.authEnabled must be provided"
        };
    }

    this.url = credentials.url;
    this.authEnabled = credentials.authEnabled;
    this.username = credentials.username;
    this.password = credentials.password;
    this.headers = { 'Content-Type': 'application/x-www-form-urlencoded'};

    if(this.authEnabled){
        this.headers["Authorization"] = "Basic " + btoa(this.username + ":" + this.password);
    }
}

/**
 * Invoke a given API.
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 *	{String} params.queryString : (optional) the http queryString to use when invoking 
 *	{String} params.bodyString : (optional) the http bodyString to use when invoking 
 *	{String} params.method : (optional) the http method to use when invoking 
 *	{Object} params.params: (optional) the parameters that are expected by the API
 */
Client.prototype.callApi = function(params) {
    try {   
        var paramsClone = JSON.parse(JSON.stringify(params));
        return this._callApi(paramsClone);
    }catch(response) {
        this._handleError(response);
    }
};

Client.prototype._callApi = function(params) {
    if(!params.api){
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Client: params.api"
        };
    }

    params.url = this.url + params.api;

    if(params.queryString != null && params.queryString != ""){
        if(!params.queryString.startsWith("?"))
            params.url += "?";

        params.url += params.queryString;
    }

    if(params.headers){
        if(this.headers){
            var keys = Object.keys(this.headers);
            for(var i = 0; i < keys.length; i++){
                params.headers[keys[i]] = this.headers[keys[i]];
            }
        }
    }else
    	params.headers = this.headers ? this.headers : {};
    
    log.info("Sending the following request: " + JSON.stringify(params));
    var response = http.request(params);

    log.info("Received following response: " + JSON.stringify(response));
    if (response.status == "200" || response.status == "201") {
        var responseBody = "";
        if (response.body) {

            try { 
                responseBody = JSON.parse(response.body ?  response.body : {});
            }catch(exception) {
                responseBody = response.body;
            } 
        }    

        if (responseBody.error || responseBody.errorCode) {
            throw response;
        }else {
            return responseBody;
        }
    }else {
        throw response;
    }
};

Client.prototype._handleError = function(response) {
    var errorObj = "";
    try {

        errorObj = JSON.parse(response.body);
    }catch(e) {

        try {
            errorObj = JSON.parse(response);
        }catch(e) {
            errorObj = response;
        }
    };

    if(errorObj != null && errorObj.metadata != null 
       && errorObj.metadata.errorCode != null && errorObj.metadata.errorCode != "" ){
        throw {
            "errorCode": errorObj.metadata.errorCode,
            "errorDetail": (errorObj.metadata.errorDetail != null && errorObj.metadata.errorDetail != "") ? errorObj.metadata.errorDetail : ""
        };

    }else{
        throw {
            "errorCode": "Invocation_Error",
            "errorDetail": errorObj
        };
    }

};